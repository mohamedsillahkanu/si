# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Iqs7jAqNXL5Jo9h7-m8E0_AqIqWxMXHQ
"""

import pandas as pd
import joblib
import streamlit as st

# Function to load models
def load_models():
    models = []
    for i in range(1, 11):
        model_path = f"model_{i}.pkl"
        model = joblib.load(model_path)
        models.append(model)
    return models

# Function for ensemble prediction
def predict_ensemble(models, input_data, features, threshold=0.5):
    user_data = pd.DataFrame([input_data], columns=features)
    predictions = []

    for model in models:
        model_predictions = model.predict(user_data)
        predictions.append(model_predictions)

    weights = [1.6149, 1.3567, 1.6115, 1.6376, 1.5458, 1.5083, 1.6601, 1.6440, 1.6485, 1.5897]
    weighted_sum = sum(weight * prediction for weight, prediction in zip(weights, predictions))
    ensemble_prediction = (weighted_sum > threshold).astype(int)

    return ensemble_prediction[0]

# Streamlit app
st.title("Diabetes Prediction App")

# Get user input for each feature
user_input = {}
for feature in features:
    user_input[feature] = st.number_input(f"Enter value for {feature}:", key=feature)

# Load models
models = load_models()

# Make prediction on button click
if st.button("Predict"):
    ensemble_prediction = predict_ensemble(models, user_input, features)

    # Display prediction
    if ensemble_prediction == 1:
        st.success("The model predicts that the person has diabetes.")
    else:
        st.success("The model predicts that the person does not have diabetes.")
